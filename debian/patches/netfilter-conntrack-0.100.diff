Description: Follow API changes in libnetfilter-conntrack.
Author: Jakub Wilk
Bug: http://sourceforge.net/tracker/?func=detail&aid=2834175&group_id=80085&atid=558668
Bug-Debian: http://bugs.debian.org/547351
Bug-Gentoo: http://bugs.gentoo.org/280747

Index: l7-filter-userspace-0.12-beta1/l7-conntrack.cpp
===================================================================
--- l7-filter-userspace-0.12-beta1.orig/l7-conntrack.cpp	2011-02-13 17:13:39.000000000 +0100
+++ l7-filter-userspace-0.12-beta1/l7-conntrack.cpp	2011-02-13 17:14:34.000000000 +0100
@@ -22,6 +22,7 @@
 #include <signal.h>
 #include <map>
 #include <cstring>
+#include <sstream>
 
 extern "C" {
 #include <linux/types.h>
@@ -121,52 +122,55 @@
   return (char *)buffer;
 }
 
-static int sprintf_conntrack_key(char *buf, struct nfct_conntrack *ct, 
-                          unsigned int flags) 
-{
-  int size = 0;
-
-  size += nfct_sprintf_protocol(buf, ct);
-  size += nfct_sprintf_address(buf+size, &ct->tuple[NFCT_DIR_ORIGINAL]);
-  size += nfct_sprintf_proto(buf+size, &ct->tuple[NFCT_DIR_ORIGINAL]);
-
-  /* Delete the last blank space */
-  buf[size-1] = '\0';
-
-  return size;
-}
-
-static string make_key(nfct_conntrack* ct, int flags)
+static string make_key(nf_conntrack* ct)
 {
   char key[512];
-  int keysize = sprintf_conntrack_key(key, ct, flags);
+  int keysize = nfct_snprintf(key, sizeof key, ct, NFCT_T_UNKNOWN, NFCT_O_DEFAULT, 0);
+  char *p = key;
+  stringstream stream;
+  for (int i = 0; i < 2; i++)
+  {
+    while (*p > 0 && *p > ' ')
+      stream << *p++;
+    while (*p > 0 && *p <= ' ')
+      stream << *p++;
+  }
+  while (*p > 0 && *p != 's')
+    p++;
+  for (int i = 0; i < 4; i++)
+  {
+    while (*p > 0 && *p <= ' ')
+      stream << *p++;
+    while (*p > 0 && *p > ' ')
+      stream << *p++;
+  }
   if(keysize >= 512){
     cerr << "Yike! Overflowed key!\n";
     exit(1);
   }
-  l7printf(2, "Made key from ct:\t%s\n", key);
-  return key;
+  string result = stream.str();
+  l7printf(2, "Made key from ct:\t%s\n", result.c_str());
+  return result;
 }
 
-static int l7_handle_conntrack_event(void *arg, unsigned int flags, int type, 
-					void *data)
+static int l7_handle_conntrack_event(enum nf_conntrack_msg_type type, nf_conntrack *ct, void *data)
 {
   l7_conntrack * l7_conntrack_handler = (l7_conntrack *) data;
 
-  nfct_conntrack* ct = (nfct_conntrack*)arg;
+  u_int8_t protonum = nfct_get_attr_u8(ct, ATTR_ORIG_L4PROTO);
 
   // I don't think there is any demand for ICMP. These are enough work for now.
-  if(ct->tuple[0].protonum != IPPROTO_TCP && 
-     ct->tuple[0].protonum != IPPROTO_UDP) return 0;
+  if(protonum != IPPROTO_TCP && protonum != IPPROTO_UDP)
+    return NFCT_CB_CONTINUE;
 
-  if(type == NFCT_MSG_DESTROY) l7printf(3, "Got event: NFCT_MSG_DESTROY\n");
-  if(type == NFCT_MSG_NEW)     l7printf(3, "Got event: NFCT_MSG_NEW\n");
-  if(type == NFCT_MSG_UPDATE)  l7printf(3, "Got event: NFCT_MSG_UPDATE\n");
-  if(type == NFCT_MSG_UNKNOWN) l7printf(3, "Got event: NFCT_MSG_UNKNOWN\n");
+  if(type == NFCT_T_DESTROY) l7printf(3, "Got event: NFCT_T_DESTROY\n");
+  if(type == NFCT_T_NEW)     l7printf(3, "Got event: NFCT_T_NEW\n");
+  if(type == NFCT_T_UPDATE)  l7printf(3, "Got event: NFCT_T_UPDATE\n");
+  if(type == NFCT_T_UNKNOWN) l7printf(3, "Got event: NFCT_T_UNKNOWN\n");
 
   // On the first packet, create the connection buffer, etc.
-  if(type == NFCT_MSG_NEW){
-    string key = make_key(ct, flags);
+  if(type == NFCT_T_NEW){
+    string key = make_key(ct);
     if (l7_conntrack_handler->get_l7_connection(key)){
       // this happens sometimes
       cerr << "Received NFCT_MSG_NEW but already have a connection. Packets = " 
@@ -179,21 +183,20 @@
     l7_conntrack_handler->add_l7_connection(thisconnection, key);
     thisconnection->key = key;
   }
-  else if(type == NFCT_MSG_DESTROY){
+  else if(type == NFCT_T_DESTROY){
     // clean up the connection buffer, etc.
-    string key = make_key(ct, flags);
+    string key = make_key(ct);
     if(l7_conntrack_handler->get_l7_connection(key)){
       l7_conntrack_handler->remove_l7_connection(key);
     }
   }
 	
-  return 0;
+  return NFCT_CB_CONTINUE;
 }
 
 
 l7_conntrack::~l7_conntrack() 
 {
-  nfct_conntrack_free(ct);
   nfct_close(cth);
   pthread_mutex_destroy(&map_mutex);
 }
@@ -240,9 +243,8 @@
 {
   int ret;
 
-  nfct_register_callback(cth, l7_handle_conntrack_event, (void *)this);
-  ret = nfct_event_conntrack(cth); // this is the main loop
+  nfct_callback_register(cth, NFCT_T_ALL, l7_handle_conntrack_event, (void *)this);
+  ret = nfct_catch(cth); // this is the main loop
   
   nfct_close(cth);
-  nfct_conntrack_free(ct);
 }
Index: l7-filter-userspace-0.12-beta1/l7-conntrack.h
===================================================================
--- l7-filter-userspace-0.12-beta1.orig/l7-conntrack.h	2011-02-13 17:13:39.000000000 +0100
+++ l7-filter-userspace-0.12-beta1/l7-conntrack.h	2011-02-13 17:14:34.000000000 +0100
@@ -50,7 +50,6 @@
 class l7_conntrack {
  private:
   l7_map l7_connections;
-  struct nfct_conntrack *ct;
   struct nfct_handle *cth; // the callback
   pthread_mutex_t map_mutex;
 
